// [문제 이름]
// : 구명보트

// [문제 설명]
// : 무인도에 갇힌 사람들을 구명보트를 이용하여 구출하려고 합니다. 구명보트는 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.

// 예를 들어, 사람들의 몸무게가 [70kg, 50kg, 80kg, 50kg]이고 구명보트의 무게 제한이 100kg이라면 2번째 사람과 4번째 사람은 같이 탈 수 있지만 1번째 사람과 3번째 사람의 무게의 합은 150kg이므로 구명보트의 무게 제한을 초과하여 같이 탈 수 없습니다.

// 구명보트를 최대한 적게 사용하여 모든 사람을 구출하려고 합니다.

// 사람들의 몸무게를 담은 배열 people과 구명보트의 무게 제한 limit가 매개변수로 주어질 때, 모든 사람을 구출하기 위해 필요한 구명보트 개수의 최솟값을 return 하도록 solution 함수를 작성해주세요.

// [문제 링크]
// : https://school.programmers.co.kr/learn/courses/30/lessons/42885

const solution = (people, limit) => {
  // ❌ 이중 for문이나 while for 문 사용하는 경우 효율성 테스트 통과 실패 ❌
  // ✅ 투 포인터 알고리즘 활용 ✅
  // : 구명 보트는 최대 2명만 탈 수 있으므로 가장 무거운 사람과 가장 가벼운 사람이 타는 경우가 최적의 방법

  // 보트의 이동 횟수를 나타내는 변수
  let count = 0;

  // 1. 몸무게를 내림차순으로 정렬
  people.sort((a, b) => b - a);

  // 2. index를 나타내는 heavy, light 두 개의 포인터 선언하여 배열을 순회
  // : heavy는 내림차순으로 정렬한 배열 첫 번째 요소의 index
  // : light는 내림차순으로 정렬한 배열 마지막 요소의 index
  for (let heavy = 0, light = people.length - 1; heavy <= light; heavy += 1) {
    // 3. 가장 무거운 사람의 무게와 가장 가벼운 사람의 무게를 더하기
    // 3-1. 더한 값이 limit을 넘지 않는다면 heavy와 light를 둘 다 1씩 증가시키기
    // ⭐ 두 명을 함께 구명보트에 실어서 보낼 수 있기 때문 ⭐
    // 3-2. 더한 값이 limit을 초과한다면 heavy만 1을 증가시키기
    // ⭐ 무거운 한 명만 구명보트에 실어 보낼 수 있기 때문 ⭐
    if (people[heavy] + people[light] <= limit) light -= 1;

    // 4. 더한 값에 상관없이 매 순회마다 보트는 무조건 이동하므로 count에 1 더하기
    count += 1;
  }

  // 5. 누적된 이동 횟수 반환
  return count;
};

console.log(solution([70, 50, 80, 50], 100));
console.log(solution([70, 80, 50], 100));
