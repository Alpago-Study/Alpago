// [문제 이름]
// : 예산

// [문제 설명]
// : 국가의 역할 중 하나는 여러 지방의 예산요청을 심사하여 국가의 예산을 분배하는 것이다. 국가예산의 총액은 미리 정해져 있어서 모든 예산요청을 배정해 주기는 어려울 수도 있다. 그래서 정해진 총액 이하에서 가능한 한 최대의 총 예산을 다음과 같은 방법으로 배정한다.

// 1. 모든 요청이 배정될 수 있는 경우에는 요청한 금액을 그대로 배정한다.
// 2. 모든 요청이 배정될 수 없는 경우에는 특정한 정수 상한액을 계산하여 그 이상인 예산요청에는 모두 상한액을 배정한다. 상한액 이하의 예산요청에 대해서는 요청한 금액을 그대로 배정한다.
// 예를 들어, 전체 국가예산이 485이고 4개 지방의 예산요청이 각각 120, 110, 140, 150이라고 하자. 이 경우, 상한액을 127로 잡으면, 위의 요청들에 대해서 각각 120, 110, 127, 127을 배정하고 그 합이 484로 가능한 최대가 된다.

// 여러 지방의 예산요청과 국가예산의 총액이 주어졌을 때, 위의 조건을 모두 만족하도록 예산을 배정하는 프로그램을 작성하시오.

// [문제 링크]
// : https://www.acmicpc.net/problem/2512

const getBudget = (requests, totalBudget) => {
  let start = 1; // 시작 포인터 설정
  let end = Math.max(...requests); // 끝 포인터 설정(요청 중 최대값)
  let result = 0; // 최종적으로 반환할 예산의 상한액

  // 1. 이진 탐색 수행
  while (start <= end) {
    // 1-1. 중간 포인터 계산
    let mid = Math.floor((start + end) / 2);
    // 1-2. 현재 중간 포인터로 예산 상한액을 설정했을 때의 총 예산 초기화
    let total = 0;

    // 1-3. 각 요청별로 예산 상한액 이하의 값을 더하여 총 예산 계산
    for (const price of requests) {
      total += Math.min(mid, price);
    }

    // 1-4. 총 예산이 총 예산 한도보다 작거나 같으면
    // 결과를 갱신하고 더 큰 값으로 탐색하기 위해 start 값을 증가시킴
    if (total <= totalBudget) {
      result = mid;
      start = mid + 1;
      // 1-5. 총 예산이 총 예산 한도보다 크면,
      // 더 작은 값으로 탐색하기 위해 end 값을 감소시킴
    } else {
      end = mid - 1;
    }
  }

  // 2. 최종 예산 상한액 반환
  return result;
};

console.log(getBudget([120, 110, 140, 150], 485));
console.log(getBudget([70, 80, 30, 40, 100], 450));
