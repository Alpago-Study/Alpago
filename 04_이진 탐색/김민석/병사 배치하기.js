// [문제 이름]
// : 병사 배치하기

// [문제 설명]
// : N명의 병사가 무작위로 나열되어 있다. 각 병사는 특정한 값의 전투력을 보유하고 있으며, 병사를 배치할 때는 전투력이 높은 병사가 앞쪽에 오도록 내림차순으로 배치를 하고자 한다. 다시 말해 앞쪽에 있는 병사의 전투력이 항상 뒤쪽에 있는 병사보다 높아야 한다.

// 또한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용한다. 그러면서도 남아있는 병사의 수가 최대가 되도록 하고 싶다.

// 예를 들어, N=7일 때 나열된 병사들의 전투력이 다음과 같다고 가정하자.

// 이 때 3번 병사와 6번 병사를 열외시키면, 다음과 같이 남아있는 병사의 수가 내림차순의 형태가 되며 5명이 된다. 이는 남아있는 병사의 수가 최대가 되도록 하는 방법이다.

// 병사에 대한 정보가 주어졌을 때, 남아있는 병사의 수가 최대가 되도록 하기 위해서 열외해야 하는 병사의 수를 출력하는 프로그램을 작성하시오

// [문제 링크]
// : https://www.acmicpc.net/problem/18353

const lowerBound = (arr, target, start, end) => {
  // 시작 인덱스가 마지막 인덱스보다 작을 때까지
  while (start < end) {
    // 중간 인덱스 설정
    let mid = Math.floor((start + end) / 2);
    // 만약 중간 값이 찾는 값보다 크거나 같다면 중간 인덱스를 마지막 인덱스로 바꾸기
    // ex) start: 1, end: 100, target 40인 경우
    // mid: 50이므로 end를 50으로 바꾸기
    if (arr[mid] >= target) end = mid;
    // 만약 중간 값이 찾는 값보다 작으면 중간 인덱스 + 1을 시작 인덱스로 바꾸기
    // ⭐ 1을 더해주는 이유 : 어차피 찾는 값이 중간 값보다 크기 때문 ⭐
    // ex) start: 1, end: 100, target 80인 경우
    // mid: 50이므로 start를 51으로 바꾸기
  }
  return end;
};

const solution = (soldiers) => {
  // ⭐ 증가하는 부분 수열을 찾아서 그 부분을 제외한 부분을 제거하면 됨 ⭐
  // ex) [4, 2, 5, 8, 4, 11, 15]의 경우 [2, 5, 8], [11, 15]를 남기고 [4], [4]를 제거해야 하므로 2명 열외

  // 1. 증가하는 수열을 찾기 위해 내림차순 배열을 뒤집어서 오름차순으로 정렬
  const reversed = soldiers.reverse();

  // 2. 열외 병사를 제외할 배열 생성
  // : 초기값 0은 값을 비교하기 위한 기준
  const deleted = [0];

  // 3. 병사 배열을 순회
  for (const soldier of reversed) {
    // 4-1. 만약 제외 배열의 마지막 요소(병사 체력)가 현재 순회 중인 병사 체력보다 작은 경우,
    // 증가하는 부분 수열을 만들 수 있으므로 배열에 삽입
    // ex) [0, 2, 5 ...]
    if (deleted[deleted.length - 1] < soldier) {
      deleted.push(soldier);
      // 4-2. 만약 제외 배열의 마지막 요소(병사 체력)이 현재 순회 중인 병사 체력보다 크거나 같은 경우,
      // 증가하는 부분 수열을 만들 수 없으므로 최대한 왼쪽 요소와 교체
      // ⭐ 교체를 위해 이진 탐색을 진행하여 가장 왼쪽 인덱스 찾기 ⭐
      // ex) [0, 2, 5, 8]이고 현재 요소가 4인 경우 5와 교체
    } else {
      const lowIndex = lowerBound(deleted, soldier, 0, deleted.length);
      deleted[lowIndex] = soldier;
    }
  }

  // 4. 전체 병사 수 - 열외 병사가 제외된 배열의 길이 - 1
  // ⭐ 1을 빼주는 이유는 초기값 0을 제외해야 하기 때문 ⭐
  return soldiers.length - (deleted.length - 1);
};

console.log(solution([15, 11, 4, 8, 5, 2, 4]));
