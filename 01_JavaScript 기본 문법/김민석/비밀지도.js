// [문제 이름]
// : 비밀지도

// [문제 설명]
// 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다. 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

// 1. 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
// 2. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
// 3. "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
// 4. 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.

// 네오가 프로도의 비상금을 손에 넣을 수 있도록, 비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.

// [문제 링크]
// : https://school.programmers.co.kr/learn/courses/30/lessons/12916

const solution = (n, arr1, arr2) => {
  // 1. 각각의 배열 요소를 이진수 문자열로 변환한 후, 비어 있는 앞 글자들을 '0'으로 채우고 새로운 배열로 반환
  // ex) 이진수 문자열이 '1'이고 n이 5면 '00001'
  const binaryArr1 = arr1.map((num) => num.toString(2).padStart(n, '0'));
  const binaryArr2 = arr2.map((num) => num.toString(2).padStart(n, '0'));

  // 2. n만큼의 길이를 가지는 빈 배열을 정의한 후, map 메서드로 새로운 배열 반환
  return Array.from({ length: n }).map((_, i) => {
    // 3. 배열 요소를 순회할 때마다 복호화할 문자열 생성
    let decoded = '';

    // 4. 각 이진수 문자열의 글자 하나씩 순회하면서 '1'이면 복호화할 문자열에 '#'을 더하고, '0'이면 ' '을 더함
    for (let j = 0; j < n; j += 1) {
      decoded +=
        binaryArr1[i][j] === '1' || binaryArr2[i][j] === '1' ? '#' : ' ';
    }

    // 5. 복호화할 문자열을 완성한 후 반환하여 새로운 배열에 저장
    return decoded;
  });
};

console.log(solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28]));
console.log(solution(6, [46, 33, 33, 22, 31, 50], [27, 56, 19, 14, 14, 10]));
