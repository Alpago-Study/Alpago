// [문제 이름]
// : 유기농 배추

// [문제 설명]
// : 차세대 영농인 한나는 강원도 고랭지에서 유기농 배추를 재배하기로 하였다. 농약을 쓰지 않고 배추를 재배하려면 배추를 해충으로부터 보호하는 것이 중요하기 때문에, 한나는 해충 방지에 효과적인 배추흰지렁이를 구입하기로 결심한다. 이 지렁이는 배추근처에 서식하며 해충을 잡아 먹음으로써 배추를 보호한다. 특히, 어떤 배추에 배추흰지렁이가 한 마리라도 살고 있으면 이 지렁이는 인접한 다른 배추로 이동할 수 있어, 그 배추들 역시 해충으로부터 보호받을 수 있다. 한 배추의 상하좌우 네 방향에 다른 배추가 위치한 경우에 서로 인접해있는 것이다.

// 한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다. 예를 들어 배추밭이 아래와 같이 구성되어 있으면 최소 5마리의 배추흰지렁이가 필요하다. 0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

// [문제 링크]
// : https://www.acmicpc.net/problem/1012

const solution = (row, col, locations) => {
  let count = 0; // 필요한 배추흰지렁이 수
  const dx = [-1, 0, 1, 0]; // x 방향 이동 값을 담은 배열 (시계 방향으로 12, 3, 6, 9)
  const dy = [0, 1, 0, -1]; // y 방향 이동 값을 담은 배열 (시계 방향으로 12, 3, 6, 9)
  const map = Array.from({ length: row }, () =>
    Array.from({ length: col }, () => 0)
  ); // 2차원 배열 map 생성 후 0으로 초기화

  // 1. 배추 위치를 저장한 배열을 순회하면서 map에 배추 위치를 1로 저장
  locations.forEach(([x, y]) => (map[x][y] = 1));

  // 2. DFS 함수 선언
  const DFS = (x, y) => {
    // 3. 현재 배추 위치를 0으로 갱신
    // ⭐ 탐색이 완료되었으니 0으로 변환하는 작업이 필요함 ⭐
    // : 0으로 갱신하지 않으면 DFS가 중복으로 호출될 수 있음
    map[x][y] = 0;

    // 4. 4방향으로 순회
    for (let i = 0; i < dx.length; i++) {
      const newX = x + dx[i]; // 새로운 x 좌표 값
      const newY = y + dy[i]; // 새로운 y 좌표 값

      // 5-1. 만약 새로운 좌표가 비정상적인 경우 (음수 값이거나 row, col보다 큰 경우) 무시
      if (newX < 0 || newY < 0 || newX >= row || newY >= col) continue;
      // 5-2. 새로운 좌표에 배추가 있는 경우 새로운 좌표로 DFS 함수 호출
      if (map[newX][newY] === 1) DFS(newX, newY);
    }
  };

  // 6. 2차원 배열 map 순회
  for (let i = 0; i < map.length; i++) {
    for (let j = 0; j < map[i].length; j++) {
      // 6-1. 만약 현재 좌표에 배추가 있다면
      if (map[i][j] === 1) {
        // 7. 배추흰지렁이가 필요하므로 지렁이 수 + 1
        count += 1;
        // 8. 현재 좌표를 인수로 DFS 함수 호출
        DFS(i, j);
      }
    }
  }

  // 9. 배추흰지렁이 수 반환
  return count;
};

console.log(
  solution(10, 8, [
    [0, 0],
    [1, 0],
    [1, 1],
    [4, 2],
    [4, 3],
    [4, 5],
    [2, 4],
    [3, 4],
    [7, 4],
    [8, 4],
    [9, 4],
    [7, 5],
    [8, 5],
    [9, 5],
    [7, 6],
    [8, 6],
    [9, 6],
  ])
);
console.log(solution(10, 10, [[5, 5]]));
console.log(
  solution(5, 3, [
    [0, 2],
    [1, 2],
    [2, 2],
    [3, 2],
    [4, 2],
    [4, 0],
  ])
);
